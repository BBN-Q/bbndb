"""fixes for multiplexed recv

Revision ID: 4d3b662f2b94
Revises: dc9546bb9eb1
Create Date: 2019-11-27 13:19:54.924804

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4d3b662f2b94'
down_revision = 'dc9546bb9eb1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attenuator',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('attenuatorchannel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.Column('attenuation', sa.Float(), nullable=False),
    sa.Column('attenuator_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['attenuator_id'], ['attenuator.id'], ),
    sa.ForeignKeyConstraint(['id'], ['physicalchannel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('average',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('axis', sa.String(), nullable=True),
    sa.Column('threshold', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['filterproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('buffer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('max_size', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['outputproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('calibration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('uncertainty', sa.Float(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('channel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('channeldatabase',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('connection',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('node1_id', sa.Integer(), nullable=True),
    sa.Column('node2_id', sa.Integer(), nullable=True),
    sa.Column('node1_name', sa.String(), nullable=False),
    sa.Column('node2_name', sa.String(), nullable=False),
    sa.Column('pipeline_name', sa.String(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['node1_id'], ['nodeproxy.id'], ),
    sa.ForeignKeyConstraint(['node2_id'], ['nodeproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dcsource',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('output', sa.Boolean(), nullable=True),
    sa.Column('level', sa.Float(), nullable=True),
    sa.Column('mode', sa.String(), nullable=True),
    sa.Column('qubit_id', sa.Integer(), nullable=True),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.ForeignKeyConstraint(['qubit_id'], ['qubit.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('demodulate',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('frequency', sa.Float(), nullable=False),
    sa.Column('bandwidth', sa.Float(), nullable=False),
    sa.Column('follow_axis', sa.String(), nullable=True),
    sa.Column('follow_freq_offset', sa.Float(), nullable=True),
    sa.Column('decimation_factor', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['filterproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('digitalinput',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.Column('processor_id', sa.Integer(), nullable=True),
    sa.Column('meas_chan_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['physicalchannel.id'], ),
    sa.ForeignKeyConstraint(['meas_chan_id'], ['measurement.id'], ),
    sa.ForeignKeyConstraint(['processor_id'], ['processor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('display',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plot_dims', sa.Integer(), nullable=False),
    sa.Column('plot_mode', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['outputproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('edge',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('target_id', sa.Integer(), nullable=True),
    sa.Column('cnot_impl', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['logicalchannel.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['qubit.id'], ),
    sa.ForeignKeyConstraint(['target_id'], ['qubit.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fidelitykernel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('save_kernel', sa.Boolean(), nullable=False),
    sa.Column('optimal_integration_time', sa.Boolean(), nullable=False),
    sa.Column('set_threshold', sa.Boolean(), nullable=False),
    sa.Column('zero_mean', sa.Boolean(), nullable=False),
    sa.Column('logistic_regression', sa.Boolean(), nullable=False),
    sa.Column('tolerance', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['filterproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('filterproxy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['nodeproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('framer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('axis', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['filterproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('generator',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('power', sa.Float(), nullable=False),
    sa.Column('frequency', sa.Float(), nullable=False),
    sa.Column('reference', sa.String(), nullable=True),
    sa.Column('spectrumanalyzer_id', sa.Integer(), nullable=True),
    sa.Column('DCsource_id', sa.Integer(), nullable=True),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['DCsource_id'], ['dcsource.id'], ),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.ForeignKeyConstraint(['spectrumanalyzer_id'], ['spectrumanalyzer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instrument',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('parameters', sa.PickleType(), nullable=False),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('integrate',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('simple_kernel', sa.Boolean(), nullable=False),
    sa.Column('kernel', sa.String(), nullable=True),
    sa.Column('bias', sa.Float(), nullable=False),
    sa.Column('box_car_start', sa.Float(), nullable=False),
    sa.Column('box_car_stop', sa.Float(), nullable=False),
    sa.Column('demod_frequency', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['filterproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('logicalchannel',
    sa.Column('frequency', sa.Float(), nullable=False),
    sa.Column('pulse_params', sa.PickleType(), nullable=True),
    sa.Column('phys_chan_id', sa.Integer(), nullable=True),
    sa.Column('gate_chan_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['gate_chan_id'], ['logicalchannel.id'], ),
    sa.ForeignKeyConstraint(['id'], ['channel.id'], ),
    sa.ForeignKeyConstraint(['phys_chan_id'], ['physicalchannel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('logicalmarkerchannel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meas_chan_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['logicalchannel.id'], ),
    sa.ForeignKeyConstraint(['meas_chan_id'], ['measurement.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('measurement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('meas_type', sa.String(), nullable=False),
    sa.Column('autodyne_freq', sa.Float(), nullable=False),
    sa.Column('control_chan_id', sa.Integer(), nullable=True),
    sa.Column('receiver_chan_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['control_chan_id'], ['qubit.id'], ),
    sa.ForeignKeyConstraint(['id'], ['logicalchannel.id'], ),
    sa.ForeignKeyConstraint(['receiver_chan_id'], ['receiverchannel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nodeproxy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('qubit_name', sa.String(), nullable=True),
    sa.Column('node_type', sa.String(length=50), nullable=True),
    sa.Column('hash_val', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('outputproxy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['filterproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('physicalchannel',
    sa.Column('instrument', sa.String(), nullable=True),
    sa.Column('translator', sa.String(), nullable=True),
    sa.Column('sampling_rate', sa.Float(), nullable=False),
    sa.Column('delay', sa.Float(), nullable=False),
    sa.Column('generator_id', sa.Integer(), nullable=True),
    sa.Column('spectrumanalyzer_id', sa.Integer(), nullable=True),
    sa.Column('DCsource_id', sa.Integer(), nullable=True),
    sa.Column('transmitter_id', sa.Integer(), nullable=True),
    sa.Column('receiver_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['DCsource_id'], ['dcsource.id'], ),
    sa.ForeignKeyConstraint(['generator_id'], ['generator.id'], ),
    sa.ForeignKeyConstraint(['id'], ['channel.id'], ),
    sa.ForeignKeyConstraint(['receiver_id'], ['receiver.id'], ),
    sa.ForeignKeyConstraint(['spectrumanalyzer_id'], ['spectrumanalyzer.id'], ),
    sa.ForeignKeyConstraint(['transmitter_id'], ['transmitter.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('physicalmarkerchannel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('gate_buffer', sa.Float(), nullable=False),
    sa.Column('gate_min_width', sa.Float(), nullable=False),
    sa.Column('sequence_file', sa.String(), nullable=True),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['physicalchannel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('physicalquadraturechannel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('amp_factor', sa.Float(), nullable=False),
    sa.Column('phase_skew', sa.Float(), nullable=False),
    sa.Column('I_channel_offset', sa.Float(), nullable=False),
    sa.Column('Q_channel_offset', sa.Float(), nullable=False),
    sa.Column('I_channel_amp_factor', sa.Float(), nullable=False),
    sa.Column('Q_channel_amp_factor', sa.Float(), nullable=False),
    sa.Column('attenuation', sa.Float(), nullable=False),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.Column('sequence_file', sa.String(), nullable=True),
    sa.Column('extra_meta', sa.PickleType(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['physicalchannel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('processor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('transceiver_id', sa.Integer(), nullable=True),
    sa.Column('master', sa.Boolean(), nullable=False),
    sa.Column('trigger_interval', sa.Float(), nullable=False),
    sa.Column('trigger_source', sa.String(), nullable=False),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.ForeignKeyConstraint(['transceiver_id'], ['transceiver.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('qubit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bias_pairs', sa.PickleType(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['logicalchannel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('receiver',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('stream_types', sa.String(), nullable=False),
    sa.Column('trigger_source', sa.String(), nullable=False),
    sa.Column('record_length', sa.Integer(), nullable=False),
    sa.Column('sampling_rate', sa.Float(), nullable=False),
    sa.Column('vertical_scale', sa.Float(), nullable=False),
    sa.Column('number_segments', sa.Integer(), nullable=True),
    sa.Column('number_waveforms', sa.Integer(), nullable=True),
    sa.Column('number_averages', sa.Integer(), nullable=True),
    sa.Column('transceiver_id', sa.Integer(), nullable=True),
    sa.Column('acquire_mode', sa.String(), nullable=False),
    sa.Column('reference', sa.String(), nullable=True),
    sa.Column('reference_freq', sa.Float(), nullable=True),
    sa.Column('stream_sel', sa.String(), nullable=False),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.ForeignKeyConstraint(['transceiver_id'], ['transceiver.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('receiverchannel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.Column('attenuation', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['physicalchannel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sample',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spectrumanalyzer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('streamselect',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stream_type', sa.String(), nullable=False),
    sa.Column('dsp_channel', sa.Integer(), nullable=True),
    sa.Column('if_freq', sa.Float(), nullable=False),
    sa.Column('kernel_data', sa.LargeBinary(), nullable=True),
    sa.Column('kernel_bias', sa.Float(), nullable=False),
    sa.Column('threshold', sa.Float(), nullable=False),
    sa.Column('threshold_invert', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['nodeproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transceiver',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('master', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('initialize_separately', sa.Boolean(), nullable=False),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transmitter',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(), nullable=False),
    sa.Column('standalone', sa.Boolean(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('trigger_interval', sa.Float(), nullable=False),
    sa.Column('trigger_source', sa.String(), nullable=False),
    sa.Column('master', sa.Boolean(), nullable=False),
    sa.Column('sequence_file', sa.String(), nullable=True),
    sa.Column('transceiver_id', sa.Integer(), nullable=True),
    sa.Column('channel_db_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_db_id'], ['channeldatabase.id'], ),
    sa.ForeignKeyConstraint(['transceiver_id'], ['transceiver.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('write',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('groupname', sa.String(), nullable=False),
    sa.Column('add_date', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['outputproxy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('write')
    op.drop_table('transmitter')
    op.drop_table('transceiver')
    op.drop_table('streamselect')
    op.drop_table('spectrumanalyzer')
    op.drop_table('sample')
    op.drop_table('receiverchannel')
    op.drop_table('receiver')
    op.drop_table('qubit')
    op.drop_table('processor')
    op.drop_table('physicalquadraturechannel')
    op.drop_table('physicalmarkerchannel')
    op.drop_table('physicalchannel')
    op.drop_table('outputproxy')
    op.drop_table('nodeproxy')
    op.drop_table('measurement')
    op.drop_table('logicalmarkerchannel')
    op.drop_table('logicalchannel')
    op.drop_table('integrate')
    op.drop_table('instrument')
    op.drop_table('generator')
    op.drop_table('framer')
    op.drop_table('filterproxy')
    op.drop_table('fidelitykernel')
    op.drop_table('edge')
    op.drop_table('display')
    op.drop_table('digitalinput')
    op.drop_table('demodulate')
    op.drop_table('dcsource')
    op.drop_table('connection')
    op.drop_table('channeldatabase')
    op.drop_table('channel')
    op.drop_table('calibration')
    op.drop_table('buffer')
    op.drop_table('average')
    op.drop_table('attenuatorchannel')
    op.drop_table('attenuator')
    # ### end Alembic commands ###
